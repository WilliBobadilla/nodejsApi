
swagger: "2.0"
info:
  description: "This is de documentation for the pets API."
  version: "1.0.0"
  title: "Animals vet"
  contact:
    email: "willi1997.1@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:3000"
basePath: "/v1"
tags:
- name: "animals"
  description: "Information about animals in a vet"
  externalDocs:
    description: "Find more"
    url: "https://cutt.ly/Pbcpnt8"
- name: "users"
  description: "Users of the platform"
  externalDocs:
    description: "Find more"
    url: "https://cutt.ly/Pbcpnt8"
schemes:
- "http"

paths:
#animal endpoints
  /animals:
    get:
      tags:
      - "animals"
      summary: "List animals"
      description: "Lists all animals in the database"
      produces:
      - "application/json"
      - "application/xml"
      responses:
        "200":
          description: "Successful operation" 
          schema:
            $ref: "#/definitions/AnimalArrayResponse"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/500"

    post:
      tags:
      - "animals"
      summary: "Add a new animal"
      description: "Add a new animal in the database"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"

      parameters:
      - in: "body"
        name: "body"
        description: "Animal object to storage"
        required: true
        schema:
          $ref: "#/definitions/Animal"

      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/AnimalResponse"
        
        "500":
          description: "Internal Server Error" 
          schema:
            $ref: "#/definitions/500"

      

  /animals/{id}:
    get:
      tags:
      - "animals"
      summary: "Find animal by id"
      description: "Find animal by making query by id"
      produces:
      - "application/json"
      - "application/xml"

      parameters:
      - name: "id"
        in: "path"
        description: "ID of animal to update"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "Successful operation"
          schema:
              $ref: "#/definitions/AnimalWithId"
        "404":
          description: "Id not found"
          schema:
            $ref: "#/definitions/404"
        
        "500":
          description: "Internal Server Error" 
          schema:
            $ref: "#/definitions/500"
          

    put:
      tags:
      - "animals"
      summary: "Update an existing animal by id"
      description: "Update and existing animal by id provided in the path"
      operationId: "updatePet"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "id"
        in: "path"
        description: "id of animal to update"
        required: true
        type: "integer"
        format: "int64"
      
      - in: "body"
        name: "body"
        description: "Animal object to update"
        required: true
        schema:
          $ref: "#/definitions/Animal"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/AnimalResponse"
        "404":
          description: "Animal not found"
          schema:
            $ref: "#/definitions/404"
          
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/500"
          

    delete:
      tags:
      - "animals"
      summary: "Delete animal by id"
      description: "Delete an animal by id provided in path"

      produces:
      - "application/json"
      - "application/xml"

      parameters:
      - name: "id"
        in: "path"
        description: "id of the animal to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:

        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/DeleteResponse"

        "404":
          description: "Animal not found"
          schema:
            $ref: "#/definitions/404"
          
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/500"

#user enpoints 
  /user:
    post:
      tags:
      - "users"
      summary: "Add a new user account"
      description: "Add a new user in the database"
      consumes:
      - "application/json"
      - "application/xml"

      produces:
      - "application/json"
      - "application/xml"

      parameters:
      - in: "body"
        name: "body"
        description: "User object to storage"
        required: true
        schema:
          $ref: "#/definitions/User"

      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/UserResponse"

        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/500"

    

    get:
      tags:
      - "users"
      summary: "List all users"
      description: "Lists all users in the database"
      produces:
      - "application/json"
      - "application/xml"
      responses:
        "200":
          description: "Successful operation" 
          schema:
            $ref: "#/definitions/UserArrayResponse"

          
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/500"

          

  /user/login:
    post:
      tags:
      - "users"
      summary: "Login in the system"
      description: "Add a new user in the database"
      consumes:
      - "application/json"
      - "application/xml"

      produces:
      - "application/json"
      - "application/xml"

      parameters:
      - in: "body"
        name: "body"
        description: "User object to storage"
        required: true
        schema:
          $ref: "#/definitions/LoginData"

      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/LoginResponse"

        "404":
          description: "Wrong email or password"
          schema:
            $ref: "#/definitions/404"
          
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/500"

  

  /user/{id}:
    get:
      tags:
      - "users"
      summary: "Get user by id"
      description: "Get user by id in database "
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "path"
        name: "id"
        type: "integer"
        description: "id of user to update"
        required: true
      responses:
        "200":
          description: "Successful operation" 
          schema:
            $ref: "#/definitions/UserResponse"
        
        "404":
          description: "User not found"
          schema:
            $ref: "#/definitions/404"
        
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/500"
  
  
  
  
    put:
      tags:
      - "users"
      summary: "Update user data"
      description: "Update user data in database"

      consumes:
      - "application/json"
      - "application/xml"

      produces:
      - "application/json"
      - "application/xml"

      

      parameters:
      - in: "path"
        name: "id"
        type: "integer"
        description: "id of user to update"
        required: true
      - in: "body"
        name: "body"
        description: "User object to update"
        required: true
        schema:
          $ref: "#/definitions/User"

      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/UserResponse"
        "404":
          description: "User not found"
          schema:
            $ref: "#/definitions/404"
        
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/500"
  

          

    delete:
      tags:
      - "users"
      summary: "Delete user by id"
      description: "Delete user by id provided in path"

      produces:
      - "application/json"
      - "application/xml"

    
      parameters:
      - name: "id"
        in: "path"
        description: "id of the user to delete"
        required: true
        type: "integer"
        format: "int64"

      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/DeleteResponse"

        "404":
          description: "User not found"
          schema:
            $ref: "#/definitions/404"
        
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/500"
  

  

    

definitions:
  Animal:
    type: "object"
    properties:
      name:
        type: "string"
      age:
        type: "integer"
        format: "int32"
      type:
        type: "integer"
        format: "int32"
      direction:
        type: "string"

    xml:
      name: "Animal"

  

  AnimalWithId:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      age:
        type: "integer"
        format: "int32"
      type:
        type: "integer"
        format: "int32"
      direction:
        type: "string"
    xml:

      name: "Animal"

  

  AnimalResponse:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      name:
        type: "string"
      age:
        type: "integer"
        format: "int32"
      type:
        type: "integer"
        format: "int32"
      direction:
        type: "string"
      createdAt : 
        type: "string"
      updatedAt:
        type: "string"

    xml:
      name: "AnimalResponse"

  AnimalArrayResponse:
    type: "array"
    items:
      $ref: '#/definitions/AnimalResponse'


  
  DeleteResponse:
    type: "object"
    properties:
      msg:
        type: "string"
      id:
        type: "string"

        

        
# User models
  User: 
    type: "object"
    properties: 
      name:
        type: "string"
      lastName: 
        type: "string"
      phoneNumber:
        type: "string"
      idNumber: 
        type: "string"
      email: 
        type: "string"
      password:
        type: "string"
      direction: 
        type: "string"

  

  UserResponse: 
    type: "object"
    properties: 
      id:
        type: "integer"
      name:
        type: "string"
      lastName: 
        type: "string"
      phoneNumber:
        type: "string"
      idNumber: 
        type: "string"
      email: 
        type: "string"
      
      direction: 
        type: "string"
      updatedAt:
        type: "string"
      createdAt:
        type: "string"

  
  

  UserWithId: 
    type: "object"
    properties: 
      name:
        type: "string"
      lastName: 
        type: "string"
      phoneNumber:
        type: "string"
      idNumber: 
        type: "string"
      email: 
        type: "string"
      direction: 
        type: "string"
    
  UserArrayResponse:
    type: "array"
    items:
      $ref: '#/definitions/UserResponse'
      

        

  LoginResponse:
    type: "object"
    properties:
      user:
        $ref: '#/definitions/UserResponse' 
      token:
        type: "string"

      

  LoginData:
    type: "object"
    properties: 
      email:
        type: "string"
      password:
        type: "string"
        
        
        
  #code status responses
  404:
    type: "object"
    properties:
      error:
        type: "string"
      message:
        type: "string"
  
  500: 
    type: "object"
    properties:
      error:
        type: "string"
      message:
        type: "string"
  
      
  


externalDocs:

  description: "Find out more about"

  url: "https://github.com/WilliBobadilla/nodejsApi"

